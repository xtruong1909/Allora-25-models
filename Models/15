import os
import pandas as pd
from datetime import datetime, timedelta
import numpy as np
from sklearn.linear_model import ElasticNet
from config import data_base_path
import random
import requests
import retrying
import pytz  # Để sử dụng timezone

forecast_price = {}

binance_data_path = os.path.join(data_base_path, "binance/futures-klines")
MAX_DATA_SIZE = 1000  # Giới hạn số lượng dữ liệu tối đa khi lưu trữ
INITIAL_FETCH_SIZE = 1000  # Số lượng nến lần đầu tải về

@retrying.retry(wait_exponential_multiplier=1000, wait_exponential_max=10000, stop_max_attempt_number=5)
def fetch_prices(symbol, interval="1m", limit=1000, start_time=None, end_time=None):
    try:
        base_url = "https://fapi.binance.com"
        endpoint = f"/fapi/v1/klines"
        params = {
            "symbol": symbol,
            "interval": interval,
            "limit": limit
        }
        if start_time:
            params['startTime'] = start_time
        if end_time:
            params['endTime'] = end_time

        url = base_url + endpoint
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f'Failed to fetch prices for {symbol} from Binance API: {str(e)}')
        raise e

def download_data(token):
    symbols = f"{token.upper()}USDT"
    interval = "5m"
    current_datetime = datetime.now()
    download_path = os.path.join(binance_data_path, token.lower())
    
    file_path = os.path.join(download_path, f"{token.lower()}_5m_data.csv")

    if os.path.exists(file_path):
        start_time = int((current_datetime - timedelta(minutes=500)).timestamp() * 1000)
        end_time = int(current_datetime.timestamp() * 1000)
        new_data = fetch_prices(symbols, interval, 100, start_time, end_time)
    else:
        start_time = int((current_datetime - timedelta(minutes=INITIAL_FETCH_SIZE*5)).timestamp() * 1000)
        end_time = int(current_datetime.timestamp() * 1000)
        new_data = fetch_prices(symbols, interval, INITIAL_FETCH_SIZE, start_time, end_time)

    new_df = pd.DataFrame(new_data, columns=[
        "start_time", "open", "high", "low", "close", "volume", "close_time",
        "quote_asset_volume", "number_of_trades", "taker_buy_base_asset_volume", 
        "taker_buy_quote_asset_volume", "ignore"
    ])

    if os.path.exists(file_path):
        old_df = pd.read_csv(file_path)
        combined_df = pd.concat([old_df, new_df])
        combined_df = combined_df.drop_duplicates(subset=['start_time'], keep='last')
    else:
        combined_df = new_df

    if len(combined_df) > MAX_DATA_SIZE:
        combined_df = combined_df.iloc[-MAX_DATA_SIZE:]

    if not os.path.exists(download_path):
        os.makedirs(download_path)
    combined_df.to_csv(file_path, index=False)
    print(f"Updated data for {token} saved to {file_path}. Total rows: {len(combined_df)}")

def calculate_rsi(df, window=14):
    delta = df['close'].diff(1)
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=window).mean()
    avg_loss = loss.rolling(window=window).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def format_data(token):
    path = os.path.join(binance_data_path, token.lower())
    file_path = os.path.join(path, f"{token.lower()}_5m_data.csv")

    if not os.path.exists(file_path):
        print(f"No data file found for {token}")
        return

    df = pd.read_csv(file_path)

    columns_to_use = [
        "start_time", "open", "high", "low", "close", "volume",
        "close_time", "quote_asset_volume", "number_of_trades",
        "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume"
    ]

    if set(columns_to_use).issubset(df.columns):
        df = df[columns_to_use]
        df.columns = [
            "start_time", "open", "high", "low", "close", "volume",
            "end_time", "quote_asset_volume", "n_trades", 
            "taker_volume", "taker_volume_usd"
        ]
        df.index = pd.to_datetime(df["start_time"], unit='ms')
        df.index.name = "date"

        df['rsi'] = calculate_rsi(df)

        output_path = os.path.join(data_base_path, f"{token.lower()}_price_data.csv")
        df.sort_index().to_csv(output_path)
        print(f"Formatted data saved to {output_path}")
    else:
        print(f"Required columns are missing in {file_path}. Skipping this file.")

def adjust_price_based_on_rsi(predicted_price, rsi):
    if rsi > 80:
        adjustment = random.uniform(-0.001, 0) * predicted_price  # Giảm từ 0% đến 0.1%
    elif rsi < 20:
        adjustment = random.uniform(0, 0.001) * predicted_price  # Tăng từ 0% đến 0.1%
    else:
        adjustment = 0
    return predicted_price + adjustment

def adjust_price_based_on_volume(predicted_price, df):
    if len(df) >= 2:
        prev_volume = df.iloc[-2]['volume']
        prev_price = df.iloc[-2]['close']
        prev_prev_price = df.iloc[-3]['close'] if len(df) >= 3 else prev_price
        volume_increase = (prev_volume - df.iloc[-3]['volume']) / df.iloc[-3]['volume'] if len(df) >= 3 else 0

        if volume_increase >= 0.2:
            if prev_price > prev_prev_price:
                predicted_price += random.uniform(0, 0.01) * predicted_price  # Tăng từ 0% đến 1%
            elif prev_price < prev_prev_price:
                predicted_price -= random.uniform(0, 0.01) * predicted_price  # Giảm từ 0% đến 1%
    return predicted_price

def train_model(token):
    time_start = datetime.now()
    price_data = pd.read_csv(os.path.join(data_base_path, f"{token.lower()}_price_data.csv"))
    price_data["date"] = pd.to_datetime(price_data["date"])
    price_data.set_index("date", inplace=True)
    df = price_data.resample('10T').mean().dropna()

    X = np.array(range(len(df))).reshape(-1, 1)
    y = df['close'].values

    model = ElasticNet(alpha=1.0, l1_ratio=0.5)
    model.fit(X, y)

    next_time_index = np.array([[len(df)]])
    predicted_price = model.predict(next_time_index)[0]

    # Điều chỉnh giá dựa trên RSI
    last_rsi = df['rsi'].iloc[-1]
    predicted_price = adjust_price_based_on_rsi(predicted_price, last_rsi)

    # Điều chỉnh giá dựa trên volume
    predicted_price = adjust_price_based_on_volume(predicted_price, df)

    forecast_price[token] = predicted_price

    print(f"Forecasted price for {token}: {forecast_price[token]}")
    time_end = datetime.now()
    print(f"Time elapsed forecast: {time_end - time_start}")

def update_data():
    tokens = ["ETH", "BTC", "BNB", "SOL", "ARB"]
    for token in tokens:
        download_data(token)
        format_data(token)
        train_model(token)

if __name__ == "__main__":
    update_data()
